vector<int> nextpermutation(vector<int>arr,int n)
{
    int i=n-2;
    while(i>=0 and arr[i]>=arr[i+1])
    {
        i--;
    }
    
    if(i<0)
    {
        reverse(arr.begin(),arr.end());
        return arr;
    }
    else
    {
        int j=n-1;
        while(arr[j]<arr[i])
        {
            j--;
        }
        
        swap(arr[i],arr[j]);
        reverse(arr.begin()+i+1,arr.end());
        
        return arr;
    }
}
int main()
{
    vector<int> arr={1,2,3};
    int n=3;
    vector<int>v=nextpermutation(arr,n);
    
    for(int x:v)
    {
        cout<<x<<" ";
    }
}



WE CAN ALSO USE INBUILT FUNCTION NEXT_PERMUTATION(aa.begin(),arr.end()) and PREV_PERMUTATION(arr.begin(),arr.end())


LEXICOGRAPHICALLY NEXT PERMUTATION IN STRING 

bool nextpermutation(string s)
{
    int n=s.length();
    int i=n-2;
    while(i>=0 and s[i]>=s[i+1])
    {
        i--;
    }
    
    if(i<0)
    {
        return false;
    }
    else
    {
        int j=n-1;
        while(s[j]<s[i])
        {
            j--;
        }
        swap(s[i],s[j]);
        reverse(s.begin()+i+1,s.end());
        return true;
    }
}
int main()
{
    string s="aaa";
    bool value=nextpermutation(s);
    if(value)
    {
        cout<<"Permuation is possible\n";
    }
    else
    {
        cout<<"Permutation is not possible\n";
    }
}
